#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Scriptpage Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo
    echo "Scriptpage Sail"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  sail COMMAND [options] [arguments]"
    echo
    echo "${YELLOW}docker Commands in the background:${NC}"
    echo "  ${GREEN}sail on${NC}        Start the docker service's"
    echo "  ${GREEN}sail off${NC}       Finish the docker service's"
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}sail up${NC}        Start the application"
    echo "  ${GREEN}sail up -d${NC}     Start the application in the background"
    echo "  ${GREEN}sail stop${NC}      Stop the application"
    echo "  ${GREEN}sail restart${NC}   Restart the application"
    echo "  ${GREEN}sail ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}artisan Commands:${NC}"
    echo "  ${GREEN}sail artisan ...${NC}   Run an Artisan command"
    echo "  ${GREEN}sail art ...${NC}       Run an Artisan command"
    echo
    echo "${YELLOW}composer Commands:${NC}"
    echo "  ${GREEN}sail composer ...${NC}   Run an composer command"
    echo
    echo "${YELLOW}nodeJS Commands:${NC}"
    echo "  ${GREEN}sail node ...${NC}       Run an node command"
    echo
    echo "${YELLOW}npm Commands:${NC}"
    echo "  ${GREEN}sail npm ...${NC}       Run an npm command"
    echo
    echo "${YELLOW}npx Commands:${NC}"
    echo "  ${GREEN}sail npx ...${NC}       Run an npx command"
    echo
    echo "${YELLOW}yarn Commands:${NC}"
    echo "  ${GREEN}sail yarn ...${NC}      Run an yarn command"
    echo

    exit 1
}

function validate_sudo {
    if sudo -n true 2>/dev/null; then
        nothing=""
    else
        echo
        echo -e "${WHITE}Please provide your password to your application's permissions.${NC}"
    fi
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_SERVICE=${APP_SERVICE:-"app"}
export WWWUSER=${WWWUSER:-"sail"}
export WWWGROUP=${WWWGROUP:-$(id -g)}

if [ $# -gt 0 ]; then
    if [ "$1" == "on" ]; then
        validate_sudo
        sudo systemctl start docker.socket
        sudo systemctl start docker
        echo
        echo -e "${WHITE}Docker started"
        echo
        exit 1
    fi

    if [ "$1" == "off" ]; then
        validate_sudo
        sudo systemctl stop docker.socket
        sudo systemctl stop docker
        echo
        echo -e "${WHITE}Docker stoped"
        echo
        exit 1
    fi
fi

# Define Docker Compose command prefix...
docker compose &> /dev/null
if [ $? == 0 ]; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

if [ -z "$SAIL_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2
        exit 1
    fi
fi

ARGS=()

# Proxy Composer commands to the "composer" binary on the application container...
if [ "$1" == "composer" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "composer" "$@")

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" php artisan "$@")

# Proxy the "phpunit" command to "php vendor/bin/phpunit"...
elif [ "$1" == "phpunit" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" php vendor/bin/phpunit "$@")

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(nodejs node "$@")

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(nodejs npm "$@")

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(nodejs npx "$@")

# Proxy YARN commands to the "yarn" binary on the application container...
elif [ "$1" == "yarn" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(nodejs yarn "$@")

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    ARGS+=(exec -u $WWWUSER)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" bash "$@")

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
    shift 1

    ARGS+=(exec -u root)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" bash "$@")

# Initiate a Redis CLI terminal session within the "redis" container...
elif [ "$1" == "redis" ] ; then
    shift 1

    ARGS+=(exec)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(redis redis-cli)

# Pass unknown commands to the "docker-compose" binary...
else
    ARGS+=("$@")
fi

# echo ""
# echo "${DOCKER_COMPOSE[@]} ${ARGS[@]}"
# echo ""

# Run Docker Compose with the defined arguments...
${DOCKER_COMPOSE[@]} ${ARGS[@]}
